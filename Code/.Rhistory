e <- ggplot(full_data[full_data$Year == 2018,], aes(x = Date, y = srad.Wm.2., color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-06-19"), xmax=as.Date("2018-06-21"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-10"), xmax=as.Date("2018-07-13"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-31"), xmax=as.Date("2018-08-02"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Downward Shortwave Radiation") +
scale_x_date(limits = as.Date(c("2018-06-15","2018-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.title.x = element_blank(),
legend.position = 'right')
f <- ggplot(full_data[full_data$Year == 2019,], aes(x = Date, y = srad.Wm.2., color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-06-25"), xmax=as.Date("2019-06-27"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-07-23"), xmax=as.Date("2019-07-25"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Downward Shortwave Radiation") +
scale_x_date(limits = as.Date(c("2019-06-15","2019-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
# Relative Humidity
full_data$rel_humid_mean <- (full_data$rmin... + full_data$rmax...) / 2
g <- ggplot(full_data[full_data$Year == 2018,], aes(x = Date, y = rel_humid_mean, color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-06-19"), xmax=as.Date("2018-06-21"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-10"), xmax=as.Date("2018-07-13"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-31"), xmax=as.Date("2018-08-02"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Mean Relative Humidity") +
scale_x_date(limits = as.Date(c("2018-06-15","2018-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.title.x = element_blank(),
legend.position = 'right')
h <- ggplot(full_data[full_data$Year == 2019,], aes(x = Date, y = rel_humid_mean, color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-06-25"), xmax=as.Date("2019-06-27"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-07-23"), xmax=as.Date("2019-07-25"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Mean Relative Humidity") +
scale_x_date(limits = as.Date(c("2019-06-15","2019-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
combine_plots <- ggarrange(a,b,c,d,e,f,g,h, nrow = 4, ncol = 2, align = 'hv', common.legend = TRUE, legend = 'right')
combine_plots
a <- ggplot(full_data[full_data$Year == 2018,], aes(x = Date, y = temp_mean, color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-06-19"), xmax=as.Date("2018-06-21"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-10"), xmax=as.Date("2018-07-13"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-31"), xmax=as.Date("2018-08-02"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Mean Temperature (°C)") +
ggtitle("2018") +
scale_x_date(limits = as.Date(c("2018-06-15","2018-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
b <- ggplot(full_data[full_data$Year == 2019,], aes(x = Date, y = temp_mean, color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-06-25"), xmax=as.Date("2019-06-27"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-07-23"), xmax=as.Date("2019-07-25"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Mean Temperature (°C)") +
ggtitle("2019") +
scale_x_date(limits = as.Date(c("2019-06-15","2019-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
# Evapotranspiration
c <- ggplot(full_data[full_data$Year == 2018,], aes(x = Date, y = pet.mm., color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-06-19"), xmax=as.Date("2018-06-21"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-10"), xmax=as.Date("2018-07-13"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-31"), xmax=as.Date("2018-08-02"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Evapotranspiration (mm)") +
scale_x_date(limits = as.Date(c("2018-06-15","2018-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
d <- ggplot(full_data[full_data$Year == 2019,], aes(x = Date, y = pet.mm., color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-06-25"), xmax=as.Date("2019-06-27"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-07-23"), xmax=as.Date("2019-07-25"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Evapotranspiration (mm)") +
scale_x_date(limits = as.Date(c("2019-06-15","2019-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
# Solar Radiation
e <- ggplot(full_data[full_data$Year == 2018,], aes(x = Date, y = srad.Wm.2., color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-06-19"), xmax=as.Date("2018-06-21"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-10"), xmax=as.Date("2018-07-13"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-31"), xmax=as.Date("2018-08-02"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Downward Shortwave Radiation") +
scale_x_date(limits = as.Date(c("2018-06-15","2018-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
f <- ggplot(full_data[full_data$Year == 2019,], aes(x = Date, y = srad.Wm.2., color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-06-25"), xmax=as.Date("2019-06-27"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-07-23"), xmax=as.Date("2019-07-25"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Downward Shortwave Radiation") +
scale_x_date(limits = as.Date(c("2019-06-15","2019-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
# Relative Humidity
full_data$rel_humid_mean <- (full_data$rmin... + full_data$rmax...) / 2
g <- ggplot(full_data[full_data$Year == 2018,], aes(x = Date, y = rel_humid_mean, color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-06-19"), xmax=as.Date("2018-06-21"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-10"), xmax=as.Date("2018-07-13"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-31"), xmax=as.Date("2018-08-02"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Mean Relative Humidity") +
scale_x_date(limits = as.Date(c("2018-06-15","2018-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.title.x = element_blank(),
legend.position = 'right')
h <- ggplot(full_data[full_data$Year == 2019,], aes(x = Date, y = rel_humid_mean, color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-06-25"), xmax=as.Date("2019-06-27"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-07-23"), xmax=as.Date("2019-07-25"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Mean Relative Humidity") +
scale_x_date(limits = as.Date(c("2019-06-15","2019-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
combine_plots <- ggarrange(a,b,c,d,e,f,g,h, nrow = 4, ncol = 2, align = 'hv', common.legend = TRUE, legend = 'right')
combine_plots
# Stats
lm(temp_mean ~ Site, data=full_data)
# Stats
anova(lm(temp_mean ~ Site, data=full_data))
# Stats
anova(lm(temp_mean ~ Site + Year, data=full_data))
# Stats
temp_mod <- lm(temp_mean ~ Site + Year, data=full_data)
evap_mod <- lm(pet.mm. ~ Site + Year, data=full_data)
evap_mod
# Stats
temp_mod <- lm(temp_mean ~ Site + Year, data=full_data)
evap_mod <- lm(pet.mm. ~ Site + Year, data=full_data)
srad_mod <- lm(srad.Wm.2. ~ Site + Year, data=full_data)
rhum_mod <- lm(rel_humid_mean ~ Site + Year, data=full_data)
lm(rel_humid_mean ~ Site + Year, data=full_data)
emmeans::emmeans(temp_mod,~Site)
emmeans::emmeans(temp_mod,~Site)
emmeans::emmeans(evap_mod,~Site)
emmeans::emmeans(srad_mod,~Site)
emmeans::emmeans(rhum_mod,~Site)
pairs(emmeans::emmeans(temp_mod,~Site))
pairs(emmeans::emmeans(temp_mod,~Site))
pairs(emmeans::emmeans(evap_mod,~Site))
pairs(emmeans::emmeans(srad_mod,~Site))
pairs(emmeans::emmeans(rhum_mod,~Site))
anova(temp_mod)
anova(evap_mod)
anova(srad_mod)
anova(rhum_mod)
pairs(emmeans::emmeans(temp_mod,~Site))
pairs(emmeans::emmeans(evap_mod,~Site))
pairs(emmeans::emmeans(srad_mod,~Site))
emmeans::emmeans(temp_mod,~Site)
pairs(emmeans::emmeans(temp_mod,~Site))
emmeans::emmeans(temp_mod,~Site)
pairs(emmeans::emmeans(rhum_mod,~Site))
rhum_mod <- lm(rel_humid_mean ~ Site + Year, data=full_data)
anova(rhum_mod)
full_data$rel_humid_mean
anova(rhum_mod)
emmeans::emmeans(rhum_mod,~Site)
emmeans::emmeans(rhum_mod,~Site)
ggsave("Weather_data_plot.svg", combine_plots, height = 6, width = 10)
ggsave("Weather_data_plot.svg", combine_plots, height = 8, width = 10)
ggsave("Weather_data_plot.svg", combine_plots, height = 10, width = 10)
combine_plots <- ggarrange(a,b,c,d,e,f,g,h, nrow = 4, ncol = 2, align = 'hv', common.legend = TRUE, legend = 'right', labels = "AUTO")
ggsave("Weather_data_plot.svg", combine_plots, height = 10, width = 10)
combine_plots <- ggarrange(a,b,c,d,e,f,g,h, nrow = 4, ncol = 2, align = 'hv', common.legend = TRUE, legend = 'right', labels = c("A", "", "B", "", "C", "", "D", ""))
combine_plots
ggsave("Weather_data_plot.svg", combine_plots, height = 10, width = 10)
# Solar Radiation
e <- ggplot(full_data[full_data$Year == 2018,], aes(x = Date, y = srad.Wm.2., color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-06-19"), xmax=as.Date("2018-06-21"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-10"), xmax=as.Date("2018-07-13"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-31"), xmax=as.Date("2018-08-02"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Downward Shortwave Rad.") +
scale_x_date(limits = as.Date(c("2018-06-15","2018-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
f <- ggplot(full_data[full_data$Year == 2019,], aes(x = Date, y = srad.Wm.2., color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-06-25"), xmax=as.Date("2019-06-27"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-07-23"), xmax=as.Date("2019-07-25"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Downward Shortwave Rad.") +
scale_x_date(limits = as.Date(c("2019-06-15","2019-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
# Relative Humidity
full_data$rel_humid_mean <- (full_data$rmin... + full_data$rmax...) / 2
g <- ggplot(full_data[full_data$Year == 2018,], aes(x = Date, y = rel_humid_mean, color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-06-19"), xmax=as.Date("2018-06-21"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-10"), xmax=as.Date("2018-07-13"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2018-07-31"), xmax=as.Date("2018-08-02"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Mean Relative Humidity") +
scale_x_date(limits = as.Date(c("2018-06-15","2018-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.title.x = element_blank(),
legend.position = 'right')
h <- ggplot(full_data[full_data$Year == 2019,], aes(x = Date, y = rel_humid_mean, color = Site, fill = Site)) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-06-25"), xmax=as.Date("2019-06-27"), ymin=-Inf, ymax=Inf) +
annotate("rect", fill = "black", alpha= 0.5, xmin=as.Date("2019-07-23"), xmax=as.Date("2019-07-25"), ymin=-Inf, ymax=Inf) +
geom_point() +
geom_smooth() +
ylab("Mean Relative Humidity") +
scale_x_date(limits = as.Date(c("2019-06-15","2019-08-10"))) +
scale_color_manual(values = site_palette) +
scale_fill_manual(values = site_palette) +
theme(legend.text.align = 0,
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = 'right')
combine_plots <- ggarrange(a,b,c,d,e,f,g,h, nrow = 4, ncol = 2, align = 'hv', common.legend = TRUE, legend = 'right', labels = c("A", "", "B", "", "C", "", "D", ""))
ggsave("Weather_data_plot.svg", combine_plots, height = 10, width = 10)
anova(temp_mod)
anova(evap_mod)
anova(srad_mod)
anova(rhum_mod)
setwd("C:/Users/Keniz/OneDrive - University of Kansas/Grad school/Dissertation/Chapter 2/GITHUB/California_Transect_Microbiome/Code")
#Packages w/ version numbers.
library('tidyverse'); packageVersion('tidyverse')
library('ggpubr'); packageVersion('ggpubr')
library('car'); packageVersion('car')
library('lme4'); packageVersion('lme4')
library('lmerTest'); packageVersion('lmerTest')
library('vegan'); packageVersion('vegan')
library('phyloseq'); packageVersion('phyloseq')
library('qiime2R'); packageVersion('qiime2R')
library('DESeq2'); packageVersion('DESeq2')
library('factoextra'); packageVersion('factoextra')
# Theme set and Color Palettes
theme_set(theme_pubr())
rootstock_palette <- c('#1b9e77', '#f0a4af', '#7570b3')
scion_palette <- c('#ed254e', '#0e79b2')
site_palette <- c('#e6ab02', '#281c39', '#12664c')
compartment_palette <- c("#5a1991", "#139d08", "#5c3c0d") #https://lospec.com/palette-list/famicube
safe_colorblind_palette <- c("Acidobacteriota" = "#88CCEE", "Actinobacteriota" = "#CC6677",
"Bacteroidota" = "#DDCC77", "Chloroflexi" = "#AA4499",
"Deinococcota" = "#332288","Firmicutes" = "#117733",
"Myxococcota" = "#661100", "Planctomycetota" = "#999933",
"Proteobacteria" = "#44AA99", "Verrucomicrobiota" = "#882255",
"Desulfobacterota" = "#888888","Crenarchaeota" = "#D55E00",
"Other" = "#6699CC")
##### Functions #####
# Calculate shannon, inverse simpson, and faith's phylogeny diversity metrics from a phyloseq object
Alpha_div_metrics <- function(phyloseq_obj){
SH <- as.data.frame(vegan::diversity(t(otu_table(phyloseq_obj)), index="shannon"))
IS <- as.data.frame(vegan::diversity(t(otu_table(phyloseq_obj)), index="invsimpson"))
CH <- as.data.frame(t(estimateR(round(t(otu_table(phyloseq_obj))))))
CH <- as.data.frame(CH$S.chao1)
alpha_div <- cbind(SH, IS, CH)
colnames(alpha_div) <-c("Shannon", "Invsimpson", "Chao1")
R <- picante::pd(samp = t(otu_table(phyloseq_obj)), tree = phy_tree(phyloseq_obj), include.root = TRUE)
alpha_div <- cbind(alpha_div, "Faithpd" = R$PD, as.data.frame(phyloseq_obj@sam_data))
return(alpha_div)
}
# Function from the R cookbook
# From: http://www.cookbook-r.com/Manipulating_data/Summarizing_data/
## Summarizes data.
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
# Function by ZNH to id outliers past a defined distance.
is_gt <- function(object, dist, threshold){
samples <- rownames(object)[dist > threshold | dist < -threshold]
return(samples)
}
# Plot PCoA using ggplot from phyloseq ordination
PLOT_PCoA <- function(plot_data, distance_matrix, axis1, axis2, split_by){
if (split_by == 'site'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=lower_political, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21), labels = c("Berry", "Leaf", "Root")) +
scale_fill_manual(name = "Site", values=site_palette, labels = c("Madera", "Merced", "San Joaquin")) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = c(shape = 21, alpha = 1)), color = guide_legend(override.aes = c(alpha=1)))
return(Plot)
} else if(split_by == 'rootstock'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=rootstock, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21)) +
scale_fill_manual(name = "Rootstock", values=rootstock_palette) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = c(shape = 21, alpha = 1)), color = guide_legend(override.aes = c(alpha=1)))
return(Plot)
} else if(split_by == 'scion'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=scion, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21)) +
scale_fill_manual(name = "Scion", values=scion_palette) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = c(shape = 21, alpha = 1)), color = guide_legend(override.aes = c(alpha=1)))
return(Plot)
} else if(split_by == 'year'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=year, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21)) +
#scale_fill_manual(name = "Scion", values=scion_palette) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = c(shape = 21, alpha = 1)), color = guide_legend(override.aes = c(alpha=1)))
return(Plot)
}  else if(split_by == 'col_week'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=col_week, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21)) +
#scale_fill_manual(name = "Scion", values=scion_palette) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = c(shape = 21, alpha = 1)), color = guide_legend(override.aes = c(alpha=1)))
return(Plot)
}   else if(split_by == 'block'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=block, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21)) +
#scale_fill_manual(name = "Scion", values=scion_palette) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = list(shape = 21)), shape = guide_legend(override.aes = list(fill = "black")))
return(Plot)
}
}
# Given a phyloseq object, return a dataframe of the sample metadata
# From: https://jacobrprice.github.io/2017/08/26/phyloseq-to-vegan-and-back.html
pssd2veg <- function(physeq) {
sd <- sample_data(physeq)
return(as(sd,"data.frame"))
}
# load dataset generated from Data_filtering_normalization.R
phy_vst <- readRDS("../Data_files/phyloseq_16s_no_soil_filtered_vst_dataset.rds")
readRDS("../Data_files/phyloseq_16s_filtered_vst_dataset.rds")
phy_vst <- readRDS("../Data_files/phyloseq_16s_filtered_vst_dataset.rds")
phy_vst@sam_data
phy_vst@sam_data$plant_body_site
##### 1.0) ALPHA DIVERSITY ANALYSIS #####
alpha_diversity.df <- Alpha_div_metrics(phy_vst)
# Lmer models
fphd_16s_fit.mod <- lmerTest::lmer(Faithpd ~ rootstock*scion + plant_body_site*brix + year + site + (1|sequence_depth), data = alpha_diversity.df)
simpI_16s_fit.mod <- lmerTest::lmer(Invsimpson ~ rootstock*scion + plant_body_site*brix + year + site + (1|sequence_depth), data = alpha_diversity.df)
chao1_16s_fit.mod <- lmerTest::lmer(Chao1 ~ rootstock*scion + plant_body_site*brix + year + site + (1|sequence_depth), data = alpha_diversity.df)
# anovas, paste these into excel
anova(fphd_16s_fit.mod)
anova(simpI_16s_fit.mod)
anova(chao1_16s_fit.mod)
# check the random effects
rand(fphd_16s_fit.mod)
rand(simpI_16s_fit.mod)
rand(chao1_16s_fit.mod)
# posthocs
pairs(emmeans(fphd_16s_fit.mod, ~ rootstock))
pairs(emmeans(fphd_16s_fit.mod, ~ plant_body_site))
library('emmeans'); packageVersion('emmeans')
pairs(emmeans(fphd_16s_fit.mod, ~ plant_body_site))
# posthocs
pairs(emmeans(fphd_16s_fit.mod, ~ rootstock))
# anovas, paste these into excel
anova(fphd_16s_fit.mod)
anova(simpI_16s_fit.mod)
anova(chao1_16s_fit.mod)
# posthocs
pairs(emmeans(fphd_16s_fit.mod, ~ rootstock))
pairs(emmeans(fphd_16s_fit.mod, ~ plant_body_site))
pairs(emmeans(fphd_16s_fit.mod, ~ year))
pairs(emmeans(fphd_16s_fit.mod, ~ site))
pairs(emmeans(fphd_16s_fit.mod, ~ rootstock|scion))
pairs(emmeans(fphd_16s_fit.mod, ~ rootstock|scion))
pairs(emmeans(simpI_16s_fit.mod, ~ plant_body_site))
# Lmer models
fphd_16s_fit.mod <- lmerTest::lmer(Faithpd ~ rootstock*scion + plant_body_site*brix + year + site + (1|sequence_depth), data = alpha_diversity.df)
pairs(emmeans(fphd_16s_fit.mod, ~ plant_body_site))
phy_vst@sam_data$plant_body_site
fphd_16s_fit.mod
phy_vst@sam_data$plant_body_site
alpha_diversity.df
alpha_diversity.df$plant_body_site
alpha_diversity.df
lmerTest::lmer(Faithpd ~ rootstock*scion + plant_body_site*brix + year + site + (1|sequence_depth), data = alpha_diversity.df)
# Lmer models
fphd_16s_fit.mod <- lmerTest::lmer(Faithpd ~ rootstock*scion + plant_body_site*brix + year + site + (1|sequence_depth), data = alpha_diversity.df)
simpI_16s_fit.mod <- lmerTest::lmer(Invsimpson ~ rootstock*scion + plant_body_site*brix + year + site + (1|sequence_depth), data = alpha_diversity.df)
chao1_16s_fit.mod <- lmerTest::lmer(Chao1 ~ rootstock*scion + plant_body_site*brix + year + site + (1|sequence_depth), data = alpha_diversity.df)
