# Subset berry data
phy_vst_root <- subset_samples(phy_vst, plant_body_site == 'root')
out.dist.bray.root <- phyloseq::distance(phy_vst_root, method = "bray")
phy_vst_metadata_root <- pssd2veg(phy_vst_root)
# Subset berry data
phy_vst_root <- subset_samples(phy_vst, plant_body_site == 'root')
out.dist.bray.root <- phyloseq::distance(phy_vst_root, method = "bray")
phy_vst_metadata_root <- pssd2veg(phy_vst_root)
# rename for merging
phy_vst_metadata_root <- phy_vst_metadata_root %>% rename("Date" = "date_collect")
#merging
phy_vst_metadata_root_w_envo <- merge(phy_vst_metadata_root, full_data, by = c("lower_political", "Date"), all.x = T)
phy_vst_metadata_root_w_envo
PC_df <- phy_vst_metadata_root_w_envo[,c("tmmn.degC.", "tmmx.degC.", "pet.mm.", "srad.Wm.2.", "rmin...", "rmax...")]
rownames(PC_df) <- phy_vst_metadata_root_w_envo$extraction_num
PC_df <- as.data.frame(scale(PC_df, scale=T, center=T))
#x <- apply(PC_df, 2, is_gt, object=phy_vst_metadata_berry_w_envo, threshold=5) # no outliers
#outliers <- unique(unlist(x))
#data_clean <- Ark_CA[!(Ark_CA$sample %in% outliers),]
#d_clean <- data_clean %>% dplyr::select(pH:B)
#d_cleanScale <- scale(d_clean, scale=T, center=T)
pca <- prcomp(PC_df)
x <- summary(pca)
axes <- x$x
axes <- as.data.frame(axes)
axes$extraction_num <- rownames(axes)
phy_vst_metadata_root_w_envo_PCA <- merge(phy_vst_metadata_root_w_envo, axes, by = c("extraction_num"), all.x = T)
phy_vst_metadata_root_w_envo_PCA
test <- varpart(out.dist.bray.root, ~ rootstock + scion, ~ brix + year, ~ site,  ~ PC1 + PC2, data = phy_vst_metadata_root_w_envo_PCA)
plot (test, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site', "Environment"), bg = c('navy', 'tomato', 'green', 'yellow'))
test <- varpart(out.dist.bray.root, ~ rootstock*scion, ~ brix + year, ~ site,  ~ PC1 + PC2, data = phy_vst_metadata_root_w_envo_PCA)
plot (test, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site', "Environment"), bg = c('navy', 'tomato', 'green', 'yellow'))
test <- varpart(out.dist.bray.root, ~ rootstock*scion, ~ brix*year, ~ site,  ~ PC1 + PC2, data = phy_vst_metadata_root_w_envo_PCA)
plot (test, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site', "Environment"), bg = c('navy', 'tomato', 'green', 'yellow'))
test
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site, data = phy_vst_metadata_root,by = "margin", permutations = 1000)
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site + PC1, data = phy_vst_metadata_root,by = "margin", permutations = 1000)
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site + PC1, data = phy_vst_metadata_root_w_envo_PCA,by = "margin", permutations = 1000)
test <- varpart(out.dist.bray.root, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_root_w_envo_PCA)
plot(test, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
out.dist.bray.root
out.dist.bray.root
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site, data = phy_vst_metadata_root_w_envo_PCA,by = "margin", permutations = 1000)
test <- varpart(out.dist.bray.root, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_root)
plot(test, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
berry <- varpart(out.dist.bray.root, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_berry)
berry <- varpart(out.dist.bray.berry, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_berry)
leaf <- varpart(out.dist.bray.leaf, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_leaf)
# Leaf Adonis
phy_vst_leaf <- subset_samples(phy_vst, plant_body_site == 'leaf')
out.dist.bray.leaf <- phyloseq::distance(phy_vst_leaf, method = "bray")
phy_vst_metadata_leaf <- pssd2veg(phy_vst_leaf)
adonis2(out.dist.bray.leaf ~ rootstock + scion + brix + year + site, data = phy_vst_metadata_leaf, by = "margin", permutations = 1000)
berry <- varpart(out.dist.bray.berry, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_berry)
leaf <- varpart(out.dist.bray.leaf, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_leaf)
root <- varpart(out.dist.bray.root, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_root)
plot(berry, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
plot(leaf, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
plot(root, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
plot(berry, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
plot(leaf, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
plot(root, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
PC_df
# Subset berry data
phy_vst_root <- subset_samples(phy_vst, plant_body_site == 'root')
out.dist.bray.root <- phyloseq::distance(phy_vst_root, method = "bray")
phy_vst_metadata_root <- pssd2veg(phy_vst_root)
# rename for merging
phy_vst_metadata_root <- phy_vst_metadata_root %>% rename("Date" = "date_collect")
merge(phy_vst_metadata_root, full_data, by = c("lower_political", "Date"), all.x = T)
#merging
phy_vst_metadata_root_w_envo <- merge(phy_vst_metadata_root, full_data, by = c("lower_political", "Date"), all.x = T)
phy_vst_metadata_root_w_envo
PC_df <- phy_vst_metadata_root_w_envo[,c("tmmn.degC.", "tmmx.degC.", "pet.mm.", "srad.Wm.2.", "rmin...", "rmax...")]
PC_df
PC_df <- phy_vst_metadata_root_w_envo[,c("extraction_num","tmmn.degC.", "tmmx.degC.", "pet.mm.", "srad.Wm.2.", "rmin...", "rmax...")]
PC_df
rownames(PC_df) <- phy_vst_metadata_root_w_envo$extraction_num
PC_df
rownames(PC_df) <- PC_df$extraction_num
PC_df <- phy_vst_metadata_root_w_envo[,c("tmmn.degC.", "tmmx.degC.", "pet.mm.", "srad.Wm.2.", "rmin...", "rmax...")]
rownames(PC_df) <- phy_vst_metadata_root_w_envo$extraction_num
PC_df <- as.data.frame(scale(PC_df, scale=T, center=T))
PC_df
#x <- apply(PC_df, 2, is_gt, object=phy_vst_metadata_berry_w_envo, threshold=5) # no outliers
#outliers <- unique(unlist(x))
#data_clean <- Ark_CA[!(Ark_CA$sample %in% outliers),]
#d_clean <- data_clean %>% dplyr::select(pH:B)
#d_cleanScale <- scale(d_clean, scale=T, center=T)
pca <- prcomp(PC_df)
x <- summary(pca)
axes <- x$x
axes
axes <- as.data.frame(axes)
rownames(axes)
phy_vst_metadata_root_w_envo$extraction_num
axes$extraction_num <- rownames(axes)
merge(phy_vst_metadata_root_w_envo, axes, by = c("extraction_num"))
phy_vst_metadata_root_w_envo_PCA <- merge(phy_vst_metadata_root_w_envo, axes, by = c("extraction_num"))
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site, data = phy_vst_metadata_root_w_envo_PCA, by = "margin", permutations = 1000)
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site, data = phy_vst_metadata_root, by = "margin", permutations = 1000)
dim(phy_vst_metadata_root_w_envo_PCA)
dim(phy_vst_metadata_root)
phy_vst_metadata_root
dim(phy_vst_metadata_root_w_envo_PCA)
phy_vst_metadata_root_w_envo_PCA
View(phy_vst_metadata_root)
phy_vst_metadata_root_w_envo_PCA
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site, data = phy_vst_metadata_root_w_envo_PCA, by = "margin", permutations = 1000)
phy_vst_metadata_root
full_data
# Subset berry data
phy_vst_root <- subset_samples(phy_vst, plant_body_site == 'root')
out.dist.bray.root <- phyloseq::distance(phy_vst_root, method = "bray")
phy_vst_metadata_root <- pssd2veg(phy_vst_root)
# rename for merging
phy_vst_metadata_root <- phy_vst_metadata_root %>% rename("Date" = "date_collect")
#merging
phy_vst_metadata_root_w_envo <- merge(phy_vst_metadata_root, full_data, by = c("lower_political", "Date"), all.x = T)
PC_df <- phy_vst_metadata_root_w_envo[,c("tmmn.degC.", "tmmx.degC.", "pet.mm.", "srad.Wm.2.", "rmin...", "rmax...")]
rownames(PC_df) <- phy_vst_metadata_root_w_envo$extraction_num
PC_df <- as.data.frame(scale(PC_df, scale=T, center=T))
#x <- apply(PC_df, 2, is_gt, object=phy_vst_metadata_berry_w_envo, threshold=5) # no outliers
#outliers <- unique(unlist(x))
#data_clean <- Ark_CA[!(Ark_CA$sample %in% outliers),]
#d_clean <- data_clean %>% dplyr::select(pH:B)
#d_cleanScale <- scale(d_clean, scale=T, center=T)
pca <- prcomp(PC_df)
x <- summary(pca)
axes <- x$x
axes <- as.data.frame(axes)
axes$extraction_num <- rownames(axes)
phy_vst_metadata_root_w_envo_PCA <- merge(phy_vst_metadata_root_w_envo, axes, by = c("extraction_num"))
dim(phy_vst_metadata_root_w_envo_PCA)
dim(phy_vst_metadata_root)
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site, data = phy_vst_metadata_root, by = "margin", permutations = 1000)
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site, data = phy_vst_metadata_root_w_envo_PCA, by = "margin", permutations = 1000)
dim(phy_vst_metadata_root)
dim(phy_vst_metadata_root_w_envo_PCA[,1:53])
test <- dim(phy_vst_metadata_root_w_envo_PCA[,1:53])
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site, data = test, by = "margin", permutations = 1000)
test <- phy_vst_metadata_root_w_envo_PCA[,1:53]
adonis2(out.dist.bray.root ~ rootstock + scion + brix + year + site, data = test, by = "margin", permutations = 1000)
# Given a phyloseq object, return a dataframe of the sample metadata
# From: https://jacobrprice.github.io/2017/08/26/phyloseq-to-vegan-and-back.html
pssd2veg <- function(physeq) {
sd <- sample_data(physeq)
return(as(sd,"data.frame"))
}
# load dataset generated from Data_filtering_normalization.R
phy_vst <- readRDS("../Data_files/phyloseq_16s_filtered_vst_dataset.rds")
# Subset berry data
phy_vst_berry <- subset_samples(phy_vst, plant_body_site == 'berry')
out.dist.bray.berry <- phyloseq::distance(phy_vst_berry, method = "bray")
phy_vst_metadata_berry <- pssd2veg(phy_vst_berry)
# Subset Leaf data
phy_vst_leaf <- subset_samples(phy_vst, plant_body_site == 'leaf')
out.dist.bray.leaf <- phyloseq::distance(phy_vst_leaf, method = "bray")
phy_vst_metadata_leaf <- pssd2veg(phy_vst_leaf)
# Subset Root data
phy_vst_root <- subset_samples(phy_vst, plant_body_site == 'root')
out.dist.bray.root <- phyloseq::distance(phy_vst_root, method = "bray")
phy_vst_metadata_root <- pssd2veg(phy_vst_root)
berry <- varpart(out.dist.bray.berry, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_berry)
leaf <- varpart(out.dist.bray.leaf, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_leaf)
root <- varpart(out.dist.bray.root, ~ rootstock*scion, ~ brix*year, ~ site, data = phy_vst_metadata_root)
plot(berry, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
plot(leaf, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
plot(root, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
berry
adonis2(out.dist.bray.berry ~ rootstock*scion, + brix*year + site, data = phy_vst_metadata_berry, by = "margin", permutations = 1000)
adonis2(out.dist.bray.berry ~ rootstock*scion, + brix*year + site, data = phy_vst_metadata_berry, permutations = 1000)
berry
anova.cca(rda(out.dist.bray.berry, rootstock*scion))
adonis2(out.dist.bray.berry ~ rootstock*scion, data = phy_vst_metadata_berry, permutations = 1000)
adonis2(out.dist.bray.berry ~ rootstock*scion, data = phy_vst_metadata_berry, by = "margin", permutations = 1000)
adonis2(out.dist.bray.berry ~ brix*year, data = phy_vst_metadata_berry, permutations = 1000)
adonis2(out.dist.bray.berry ~ brix*year, data = phy_vst_metadata_berry, by = "margin", permutations = 1000)
adonis2(out.dist.bray.berry ~ site, data = phy_vst_metadata_berry, by = "margin", permutations = 1000)
berry
adonis2(out.dist.bray.berry ~ rootstock*scion + brix*year, data = phy_vst_metadata_berry, by = "margin", permutations = 1000)
berry
adonis2(out.dist.bray.berry ~ rootstock*scion + brix*year, data = phy_vst_metadata_berry, by = "null", permutations = 1000)
adonis2(out.dist.bray.berry ~ rootstock*scion + brix*year, data = phy_vst_metadata_berry, by = NULL, permutations = 1000)
adonis2(out.dist.bray.berry ~ rootstock*scion, data = phy_vst_metadata_berry, by = NULL, permutations = 1000)
adonis2(out.dist.bray.berry ~ brix*year, data = phy_vst_metadata_berry, by = NULL, permutations = 1000)
adonis2(out.dist.bray.berry ~ site, data = phy_vst_metadata_berry, by = NULL, permutations = 1000)
berry
# full
adonis2(out.dist.bray.berry ~ rootstock*scion + brix*year + site, data = phy_vst_metadata_berry, by = NULL, permutations = 1000)
# double terms
adonis2(out.dist.bray.berry ~ rootstock*scion + brix*year, data = phy_vst_metadata_berry, by = NULL, permutations = 1000)
adonis2(out.dist.bray.berry ~ rootstock*scion + site, data = phy_vst_metadata_berry, by = NULL, permutations = 1000)
plot(berry, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
plot(leaf, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
plot(root, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
# Testing single terms
adonis2(out.dist.bray.leaf ~ rootstock*scion, data = phy_vst_metadata_leaf, by = NULL, permutations = 1000)
adonis2(out.dist.bray.leaf ~ brix*year, data = phy_vst_metadata_leaf, by = NULL, permutations = 1000)
adonis2(out.dist.bray.leaf ~ site, data = phy_vst_metadata_leaf, by = NULL, permutations = 1000)
# double terms
adonis2(out.dist.bray.leaf ~ rootstock*scion + brix*year, data = phy_vst_metadata_leaf, by = NULL, permutations = 1000)
plot(leaf, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
# double terms
adonis2(out.dist.bray.leaf ~ rootstock*scion + brix*year, data = phy_vst_metadata_leaf, by = NULL, permutations = 1000)
adonis2(out.dist.bray.leaf ~ rootstock*scion + site, data = phy_vst_metadata_leaf, by = NULL, permutations = 1000)
# full
adonis2(out.dist.bray.leaf ~ rootstock*scion + brix*year + site, data = phy_vst_metadata_leaf, by = NULL, permutations = 1000)
#Root
# Testing single terms
adonis2(out.dist.bray.root ~ rootstock*scion, data = phy_vst_metadata_root, by = NULL, permutations = 1000)
adonis2(out.dist.bray.root ~ brix*year, data = phy_vst_metadata_root, by = NULL, permutations = 1000)
adonis2(out.dist.bray.root ~ site, data = phy_vst_metadata_root, by = NULL, permutations = 1000)
# double terms
adonis2(out.dist.bray.root ~ rootstock*scion + brix*year, data = phy_vst_metadata_root, by = NULL, permutations = 1000)
adonis2(out.dist.bray.root ~ rootstock*scion + site, data = phy_vst_metadata_root, by = NULL, permutations = 1000)
# full
adonis2(out.dist.bray.root ~ rootstock*scion + brix*year + site, data = phy_vst_metadata_root, by = NULL, permutations = 1000)
test <- plot(berry, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
test
plot(berry, digits = 3, Xnames = c('Host Genotype', 'Development', 'Site'), bg = c('navy', 'tomato', 'green'))
#Packages w/ version numbers.
library('tidyverse'); packageVersion('tidyverse')
library('ggpubr'); packageVersion('ggpubr')
library('car'); packageVersion('car')
library('lme4'); packageVersion('lme4')
library('lmerTest'); packageVersion('lmerTest')
library('vegan'); packageVersion('vegan')
library('phyloseq'); packageVersion('phyloseq')
library('qiime2R'); packageVersion('qiime2R')
library('DESeq2'); packageVersion('DESeq2')
###  panel D
### This is a heat map with each of the top 10 phyla + the other category
### The heat map will show the % variance explained after correcting for multiple
### testing across all of the models together (BH, Benjamini & Hochberg).
# Get data from phyloseq object.
phylum_lvl_panelD <- tax_glom(phy_vst, taxrank = "Phylum") # 42 taxa
phylum_lvl_panelD <- subset_samples(phylum_lvl_panelD, extraction_num != "492" & extraction_num != "615")
# Make relative abundance AKA transform sample counts by diving by the ASV total.
phylum_lvl_panelD <- transform_sample_counts(phylum_lvl_panelD, function(x) x/sum(x))
###  panel D
### This is a heat map with each of the top 10 phyla + the other category
### The heat map will show the % variance explained after correcting for multiple
### testing across all of the models together (BH, Benjamini & Hochberg).
# Get data from phyloseq object.
phylum_lvl_panelD <- tax_glom(phy_vst, taxrank = "Phylum") # 42 taxa
# load dataset generated from Data_filtering_normalization.R
phy_vst <- readRDS("../Data_files/phyloseq_16s_no_soil_filtered_vst_dataset.rds")
###  panel D
### This is a heat map with each of the top 10 phyla + the other category
### The heat map will show the % variance explained after correcting for multiple
### testing across all of the models together (BH, Benjamini & Hochberg).
# Get data from phyloseq object.
phylum_lvl_panelD <- tax_glom(phy_vst, taxrank = "Phylum") # 42 taxa
phylum_lvl_panelD <- subset_samples(phylum_lvl_panelD, extraction_num != "492" & extraction_num != "615")
# Make relative abundance AKA transform sample counts by diving by the ASV total.
phylum_lvl_panelD <- transform_sample_counts(phylum_lvl_panelD, function(x) x/sum(x))
# Take only the n number of taxa per taxonomic rank based on relative abundance.
# Taxa >n will be added to a other label.
phylum_lvl_panelD <- fantaxtic::get_top_taxa(physeq_obj = phylum_lvl_panelD, n = 10, relative = TRUE, discard_other = FALSE, other_label = "Other")
# Instead of using psmelt, instead keep data in wide format (taxa as rows)
Phylum_relative_abund <- as.data.frame(t(otu_table(phylum_lvl_panelD)))
colnames(Phylum_relative_abund) <- as.data.frame(phylum_lvl_panelD@tax_table)$Phylum # Name the columns their by phyla
Phylum_w_meta <- cbind(Phylum_relative_abund, pssd2veg(phylum_lvl_panelD))# Attach metadata
# Reorganize and rename to format for plotting
total_var <- total_var %>% gather(key=factor, value=var, -taxa)
#Packages w/ version numbers.
library('tidyverse'); packageVersion('tidyverse')
library('ggpubr'); packageVersion('ggpubr')
library('car'); packageVersion('car')
library('lme4'); packageVersion('lme4')
library('lmerTest'); packageVersion('lmerTest')
library('vegan'); packageVersion('vegan')
library('phyloseq'); packageVersion('phyloseq')
library('qiime2R'); packageVersion('qiime2R')
library('DESeq2'); packageVersion('DESeq2')
library('emmeans'); packageVersion('emmeans')
library('lubridate'); packageVersion('lubridate')
library('rebus'); packageVersion('rebus')
library('viridis'); packageVersion('viridis')
library('corrplot'); packageVersion('corrplot')
library('factoextra'); packageVersion('factoextra')
# Theme set and Color Palettes
theme_set(theme_pubr())
rootstock_palette <- c('#1b9e77', '#f0a4af', '#7570b3')
scion_palette <- c('#ed254e', '#0e79b2')
site_palette <- c('#e6ab02', '#281c39', '#12664c')
compartment_palette <- c("#5a1991", "#139d08", "#5c3c0d") #https://lospec.com/palette-list/famicube
safe_colorblind_palette <- c("Acidobacteriota" = "#88CCEE", "Actinobacteriota" = "#CC6677",
"Bacteroidota" = "#DDCC77", "Chloroflexi" = "#AA4499",
"Deinococcota" = "#332288","Firmicutes" = "#117733",
"Myxococcota" = "#661100", "Planctomycetota" = "#999933",
"Proteobacteria" = "#44AA99", "Verrucomicrobiota" = "#882255",
"Desulfobacterota" = "#888888","Crenarchaeota" = "#D55E00",
"Other" = "#6699CC")
##### Functions #####
# Calculate shannon, inverse simpson, and faith's phylogeny diversity metrics from a phyloseq object
Alpha_div_metrics <- function(phyloseq_obj){
SH <- as.data.frame(vegan::diversity(t(otu_table(phyloseq_obj)), index="shannon"))
IS <- as.data.frame(vegan::diversity(t(otu_table(phyloseq_obj)), index="invsimpson"))
CH <- as.data.frame(t(estimateR(round(t(otu_table(phyloseq_obj))))))
CH <- as.data.frame(CH$S.chao1)
alpha_div <- cbind(SH, IS, CH)
colnames(alpha_div) <-c("Shannon", "Invsimpson", "Chao1")
R <- picante::pd(samp = t(otu_table(phyloseq_obj)), tree = phy_tree(phyloseq_obj), include.root = TRUE)
alpha_div <- cbind(alpha_div, "Faithpd" = R$PD, as.data.frame(phyloseq_obj@sam_data))
return(alpha_div)
}
# Function from the R cookbook
# From: http://www.cookbook-r.com/Manipulating_data/Summarizing_data/
## Summarizes data.
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
# Function by ZNH to id outliers past a defined distance.
is_gt <- function(object, dist, threshold){
samples <- rownames(object)[dist > threshold | dist < -threshold]
return(samples)
}
# Plot PCoA using ggplot from phyloseq ordination
PLOT_PCoA <- function(plot_data, distance_matrix, axis1, axis2, split_by){
if (split_by == 'site'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=lower_political, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21), labels = c("Berry", "Leaf", "Root")) +
scale_fill_manual(name = "Site", values=site_palette, labels = c("Madera", "Merced", "San Joaquin")) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = c(shape = 21, alpha = 1)), color = guide_legend(override.aes = c(alpha=1)))
return(Plot)
} else if(split_by == 'rootstock'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=rootstock, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21)) +
scale_fill_manual(name = "Rootstock", values=rootstock_palette) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = c(shape = 21, alpha = 1)), color = guide_legend(override.aes = c(alpha=1)))
return(Plot)
} else if(split_by == 'scion'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=scion, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21)) +
scale_fill_manual(name = "Scion", values=scion_palette) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = c(shape = 21, alpha = 1)), color = guide_legend(override.aes = c(alpha=1)))
return(Plot)
} else if(split_by == 'year'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=year, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21)) +
#scale_fill_manual(name = "Scion", values=scion_palette) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = c(shape = 21, alpha = 1)), color = guide_legend(override.aes = c(alpha=1)))
return(Plot)
}  else if(split_by == 'col_week'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=col_week, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21)) +
#scale_fill_manual(name = "Scion", values=scion_palette) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = c(shape = 21, alpha = 1)), color = guide_legend(override.aes = c(alpha=1)))
return(Plot)
}   else if(split_by == 'block'){
temp <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2))
temp[["layers"]][[1]][["geom"]][["default_aes"]][["colour"]] <- "white" # make the plot_ordination points white to allow me to use alpha without them showing through.
Plot <- plot_ordination(plot_data, distance_matrix, axes = c(axis1,axis2)) +
geom_point(aes(fill=block, shape=plant_body_site), size = 5, alpha = 0.80, color = "black") +
scale_shape_manual(values=c(22, 24, 21)) +
#scale_fill_manual(name = "Scion", values=scion_palette) +
labs(shape= "Compartment", color= "Site") +
xlab(paste("PCoA", axis1, sub(".*\\ ", "", temp$labels$x))) +
ylab(paste("PCoA", axis2, sub(".*\\ ", "", temp$labels$y))) +
guides(fill = guide_legend(override.aes = list(shape = 21)), shape = guide_legend(override.aes = list(fill = "black")))
return(Plot)
}
}
# Given a phyloseq object, return a dataframe of the sample metadata
# From: https://jacobrprice.github.io/2017/08/26/phyloseq-to-vegan-and-back.html
pssd2veg <- function(physeq) {
sd <- sample_data(physeq)
return(as(sd,"data.frame"))
}
# load dataset generated from Data_filtering_normalization.R
phy_vst <- readRDS("../Data_files/phyloseq_16s_no_soil_filtered_vst_dataset.rds")
##### 1.0) ALPHA DIVERSITY ANALYSIS #####
alpha_diversity.df <- Alpha_div_metrics(phy_vst)
# Lmer models
fphd_16s_fit.mod <- lmerTest::lmer(Faithpd ~ rootstock*scion + plant_body_site*brix + year + site + (1|sequence_depth), data = alpha_diversity.df)
simpI_16s_fit.mod <- lmerTest::lmer(Invsimpson ~ rootstock*scion + plant_body_site*brix + year + site + (1|sequence_depth), data = alpha_diversity.df)
###  panel D
### This is a heat map with each of the top 10 phyla + the other category
### The heat map will show the % variance explained after correcting for multiple
### testing across all of the models together (BH, Benjamini & Hochberg).
# Get data from phyloseq object.
phylum_lvl_panelD <- tax_glom(phy_vst, taxrank = "Phylum") # 42 taxa
phylum_lvl_panelD <- subset_samples(phylum_lvl_panelD, extraction_num != "492" & extraction_num != "615")
# Make relative abundance AKA transform sample counts by diving by the ASV total.
phylum_lvl_panelD <- transform_sample_counts(phylum_lvl_panelD, function(x) x/sum(x))
# Take only the n number of taxa per taxonomic rank based on relative abundance.
# Taxa >n will be added to a other label.
phylum_lvl_panelD <- fantaxtic::get_top_taxa(physeq_obj = phylum_lvl_panelD, n = 10, relative = TRUE, discard_other = FALSE, other_label = "Other")
# Instead of using psmelt, instead keep data in wide format (taxa as rows)
Phylum_relative_abund <- as.data.frame(t(otu_table(phylum_lvl_panelD)))
colnames(Phylum_relative_abund) <- as.data.frame(phylum_lvl_panelD@tax_table)$Phylum # Name the columns their by phyla
Phylum_w_meta <- cbind(Phylum_relative_abund, pssd2veg(phylum_lvl_panelD))# Attach metadata
# Firmicutes and Deinococcota average relative abundance.
sum(Phylum_w_meta$Deinococcota * 100) / 592 # 1.08%
sum(Phylum_w_meta$Firmicutes * 100) / 592 # 5.45%
# Linear models but only for the root samples
model_ot <- lm(Other ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
model_my <- lm(Myxococcota ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
model_pr <- lm(Proteobacteria ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
model_ch <- lm(Chloroflexi ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
model_de <- lm(Deinococcota ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
model_fi <- lm(Firmicutes ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
model_act <- lm(Actinobacteriota ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
model_ba <- lm(Bacteroidota ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
model_pl <- lm(Planctomycetota ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
model_ve <- lm(Verrucomicrobiota ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
model_aci <- lm(Acidobacteriota ~ rootstock + scion + year + brix + site, data=Phylum_w_meta[Phylum_w_meta$plant_body_site == "root",])
# San Joaquin different than others
pairs(emmeans(model_pl,~site))
pairs(emmeans(model_ba,~site))
pairs(emmeans(model_aci,~site))
# Merced different than others
pairs(emmeans(model_my,~site))
pairs(emmeans(model_pr,~site))
# Teleki 5c different than others
pairs(emmeans(model_ch,~rootstock))
pairs(emmeans(model_pl,~rootstock))
pairs(emmeans(model_my,~rootstock))
pairs(emmeans(model_ve,~rootstock))
# Higher actinobacteria in 2019 v 2018
pairs(emmeans(model_act, ~year))
### Heat map of LM results ###
Return_SS_proportion <- function(model){
SS <- c(anova(model)$Sum)
output <- (SS / sum(SS)) * 100
output <- as.data.frame(output)
rownames(output) <- c(rownames(anova(model)))
output <- t(output)
return(as.data.frame(output))}
# San Joaquin different than others
pairs(emmeans(model_pl,~site))
pairs(emmeans(model_ba,~site))
pairs(emmeans(model_aci,~site))
# Merced different than others
pairs(emmeans(model_my,~site))
pairs(emmeans(model_pr,~site))
# San Joaquin different than others
pairs(emmeans(model_pl,~site))
pairs(emmeans(model_ba,~site))
pairs(emmeans(model_aci,~site))
# Merced different than others
pairs(emmeans(model_my,~site))
pairs(emmeans(model_pr,~site))
# Merced different than others
pairs(emmeans(model_my,~site))
pairs(emmeans(model_pr,~site))
emmeans(model_my,~site)
emmeans(model_pr,~site)
